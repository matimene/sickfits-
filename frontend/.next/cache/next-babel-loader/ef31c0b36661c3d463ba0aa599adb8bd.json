{"ast":null,"code":"import { PAGINATION_QUERY } from '../components/Pagination';\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n    // Tells apollo we will take care of everything\n    read: function read() {\n      var _data$_allProductsMet;\n\n      var existing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      var _ref = arguments.length > 1 ? arguments[1] : undefined,\n          args = _ref.args,\n          cache = _ref.cache;\n\n      // First thing it does is ask the read fn for those items\n      var skip = args.skip,\n          first = args.first; // Read the number of items on the page from the cache\n\n      var data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      var count = data === null || data === void 0 ? void 0 : (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count;\n      var page = skip / first + 1;\n      var pages = Math.ceil(count / first); // Check if we have existing items\n\n      var items = existing.slice(skip, skip + first).filter(function (x) {\n        return x;\n      });\n\n      if (items.length !== first) {\n        // We dont have any items, we must fetch them\n        return false;\n      } // If there are items, just return them from the cache\n\n\n      if (items.length) {\n        return items;\n      }\n\n      return false; // fallback to network\n    },\n    merge: function merge() {// This runs when apollo client comes back from the network with our products\n    }\n  };\n}","map":{"version":3,"sources":["C:/WebDEV/C O U R S E S/ecommerce-wesbos/frontend/lib/paginationField.js"],"names":["PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","skip","first","data","readQuery","query","count","_allProductsMeta","page","pages","Math","ceil","items","slice","filter","x","length","merge"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,0BAAjC;AAEA,eAAe,SAASC,eAAT,GAA2B;AACvC,SAAO;AACJC,IAAAA,OAAO,EAAE,KADL;AACY;AAChBC,IAAAA,IAFI,kBAEiC;AAAA;;AAAA,UAAhCC,QAAgC,uEAArB,EAAqB;;AAAA;AAAA,UAAfC,IAAe,QAAfA,IAAe;AAAA,UAATC,KAAS,QAATA,KAAS;;AAClC;AADkC,UAG1BC,IAH0B,GAGVF,IAHU,CAG1BE,IAH0B;AAAA,UAGpBC,KAHoB,GAGVH,IAHU,CAGpBG,KAHoB,EAIlC;;AACA,UAAMC,IAAI,GAAGH,KAAK,CAACI,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEX;AAAT,OAAhB,CAAb;AACA,UAAMY,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,gBAAT,0DAAG,sBAAwBD,KAAtC;AACA,UAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAe,CAA5B;AACA,UAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd,CARkC,CASlC;;AACA,UAAMU,KAAK,GAAGd,QAAQ,CAACe,KAAT,CAAeZ,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCY,MAAnC,CAA0C,UAACC,CAAD;AAAA,eAAOA,CAAP;AAAA,OAA1C,CAAd;;AACA,UAAIH,KAAK,CAACI,MAAN,KAAiBd,KAArB,EAA4B;AACzB;AACA,eAAO,KAAP;AACF,OAdiC,CAelC;;;AACA,UAAIU,KAAK,CAACI,MAAV,EAAkB;AACf,eAAOJ,KAAP;AACF;;AACD,aAAO,KAAP,CAnBkC,CAmBpB;AAChB,KAtBG;AAuBJK,IAAAA,KAvBI,mBAuBI,CACL;AACF;AAzBG,GAAP;AA2BF","sourcesContent":["import { PAGINATION_QUERY } from '../components/Pagination';\r\n\r\nexport default function paginationField() {\r\n   return {\r\n      keyArgs: false, // Tells apollo we will take care of everything\r\n      read(existing = [], { args, cache }) {\r\n         // First thing it does is ask the read fn for those items\r\n\r\n         const { skip, first } = args;\r\n         // Read the number of items on the page from the cache\r\n         const data = cache.readQuery({ query: PAGINATION_QUERY });\r\n         const count = data?._allProductsMeta?.count;\r\n         const page = skip / first + 1;\r\n         const pages = Math.ceil(count / first);\r\n         // Check if we have existing items\r\n         const items = existing.slice(skip, skip + first).filter((x) => x);\r\n         if (items.length !== first) {\r\n            // We dont have any items, we must fetch them\r\n            return false;\r\n         }\r\n         // If there are items, just return them from the cache\r\n         if (items.length) {\r\n            return items;\r\n         }\r\n         return false; // fallback to network\r\n      },\r\n      merge() {\r\n         // This runs when apollo client comes back from the network with our products\r\n      },\r\n   };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}