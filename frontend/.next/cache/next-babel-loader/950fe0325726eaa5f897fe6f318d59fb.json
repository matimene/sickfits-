{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { gql, useMutation } from '@apollo/client';\nimport { CardElement, Elements, useElements, useStripe } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useRouter } from 'next/dist/client/router';\nimport nProgress from 'nprogress';\nimport { useState } from 'react';\nimport styled from 'styled-components';\nimport { useCart } from '../lib/cartState';\nimport SickButton from './styles/SickButton';\nimport { CURRENT_USER_QUERY } from './User';\nconst CheckoutFormStyles = styled.form.withConfig({\n  displayName: \"Checkout__CheckoutFormStyles\",\n  componentId: \"sc-10mtoy5-0\"\n})([\"box-shadow:0 1px 2px 2px rgba(0,0,0,0.04);border:1px solid rgba(0,0,0,0.06);border-radius:5px;padding:1rem;display:grid;grid-gap:1rem;\"]);\nconst CREATE_ORDER_MUTATION = gql`\n   mutation CREATE_ORDER_MUTATION($token: String!) {\n      checkout(token: $token) {\n         id\n         charge\n         total\n         items {\n            id\n            name\n         }\n      }\n   }\n`;\nconst stripeLib = loadStripe(process.env.NEXT_PUBLIC_STRIPE_KEY);\n\nfunction CheckoutForm() {\n  const {\n    0: error,\n    1: setError\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const stripe = useStripe();\n  const elements = useElements();\n  const [checkout, {\n    error: graphQLError\n  }] = useMutation(CREATE_ORDER_MUTATION, {\n    refetchQueries: [{\n      query: CURRENT_USER_QUERY\n    }]\n  });\n  const router = useRouter();\n  const {\n    closeCart\n  } = useCart();\n\n  async function handleSubmit(e) {\n    // 1. Stop the form from submitting and turn the loader on\n    e.preventDefault();\n    setLoading(true); // 2.Start the page transition\n\n    nProgress.start(); // 3.Create the payment method via stripe (token comes back if sucessful)\n\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: elements.getElement(CardElement)\n    });\n    console.log(paymentMethod); // 4. Handle any errors from stripe\n\n    if (error) {\n      setError(error);\n      nProgress.done();\n      return; // stops the checkout from happening\n    } // 5. Send the token from tep 3 to our keystone server via custom mutation\n\n\n    const order = await checkout({\n      variables: {\n        token: paymentMethod.id\n      }\n    });\n    console.log('Finish with the order!!', order); // 6. Change the page to view the order\n\n    router.push({\n      pathname: `/order/[id]`,\n      query: {\n        id: order.data.checkout.id\n      }\n    }); // 7. Close the cart\n\n    closeCart(); // 8. Turn the loader off\n\n    setLoading(false);\n    nProgress.done();\n  }\n\n  return /*#__PURE__*/_jsxs(CheckoutFormStyles, {\n    onSubmit: handleSubmit,\n    children: [error && /*#__PURE__*/_jsx(\"p\", {\n      style: {\n        fontSize: 12\n      },\n      children: error.message\n    }), graphQLError && /*#__PURE__*/_jsx(\"p\", {\n      style: {\n        fontSize: 12\n      },\n      children: graphQLError.message\n    }), /*#__PURE__*/_jsx(CardElement, {}), /*#__PURE__*/_jsx(SickButton, {\n      children: \"Check out now\"\n    })]\n  });\n}\n\nfunction Checkout() {\n  return /*#__PURE__*/_jsx(Elements, {\n    stripe: stripeLib,\n    children: /*#__PURE__*/_jsx(CheckoutForm, {})\n  });\n}\n\nexport default Checkout;","map":null,"metadata":{},"sourceType":"module"}