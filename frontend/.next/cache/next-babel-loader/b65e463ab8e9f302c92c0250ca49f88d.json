{"ast":null,"code":"import { PAGINATION_QUERY } from '../components/Pagination';\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n\n    // Tells apollo we will take care of everything\n    read(existing = [], {\n      args,\n      cache\n    }) {\n      var _data$_allProductsMet;\n\n      // First thing it does is ask the read fn for those items\n      const {\n        skip,\n        first\n      } = args; // Read the number of items on the page from the cache\n\n      const data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      const count = data === null || data === void 0 ? void 0 : (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count;\n      const page = skip / first + 1;\n      const pages = Math.ceil(count / first); // Check if we have existing items\n\n      const items = existing.slice(skip, skip + first).filter(x => x);\n\n      if (items.length && items.length !== first && page === pages) {\n        // If there are items AND there arent enough items to satisfy how many were requested AND\n        // we're on the last page THEN just send it\n        return items;\n      }\n\n      if (items.length !== first) {\n        // We dont have any items, we must fetch them\n        return false;\n      } // If there are items, just return them from the cache\n\n\n      if (items.length) {\n        return items;\n      }\n\n      return false; // fallback to network\n    },\n\n    merge(existing, incoming, {\n      args\n    }) {\n      const {\n        skip,\n        first\n      } = args; // This runs when apollo client comes back from the network with our products\n\n      const merged = existing ? existing.slice(0) : [];\n\n      for (let i = skip; i < skip + incoming.length; i++) {\n        merged[i] = incoming[i - skip];\n      } // Finally we return items the merged items from the cache\n\n\n      return merged;\n    }\n\n  };\n}","map":null,"metadata":{},"sourceType":"module"}