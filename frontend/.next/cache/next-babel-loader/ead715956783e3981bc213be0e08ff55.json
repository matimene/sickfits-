{"ast":null,"code":"import { ApolloClient, ApolloLink, InMemoryCache } from '@apollo/client';\nimport { onError } from '@apollo/link-error';\nimport { getDataFromTree } from '@apollo/client/react/ssr';\nimport { createUploadLink } from 'apollo-upload-client';\nimport withApollo from 'next-with-apollo';\nimport { endpoint, prodEndpoint } from '../config';\n\nfunction createClient({\n  headers,\n  initialState\n}) {\n  return new ApolloClient({\n    link: ApolloLink.from([onError(({\n      graphQLErrors,\n      networkError\n    }) => {\n      if (graphQLErrors) graphQLErrors.forEach(({\n        message,\n        locations,\n        path\n      }) => console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`));\n      if (networkError) console.log(`[Network error]: ${networkError}. Backend is unreachable. Is it running?`);\n    }), // this uses apollo-link-http under the hood, so all the options here come from that package\n    createUploadLink({\n      uri: true ? endpoint : prodEndpoint,\n      fetchOptions: {\n        credentials: 'include'\n      },\n      // pass the headers along from this request. This enables SSR with logged in state\n      headers\n    })]),\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {// TODO: We will add this together!\n            // allProducts: paginationField(),\n          }\n        }\n      }\n    }).restore(initialState || {})\n  });\n}\n\nexport default withApollo(createClient, {\n  getDataFromTree\n});","map":{"version":3,"sources":["C:/WebDEV/C O U R S E S/ecommerce-wesbos/frontend/lib/withData.js"],"names":["ApolloClient","ApolloLink","InMemoryCache","onError","getDataFromTree","createUploadLink","withApollo","endpoint","prodEndpoint","createClient","headers","initialState","link","from","graphQLErrors","networkError","forEach","message","locations","path","console","log","uri","fetchOptions","credentials","cache","typePolicies","Query","fields","restore"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,UAAvB,EAAmCC,aAAnC,QAAwD,gBAAxD;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,WAAvC;;AAEA,SAASC,YAAT,CAAsB;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAtB,EAAiD;AAC9C,SAAO,IAAIX,YAAJ,CAAiB;AACrBY,IAAAA,IAAI,EAAEX,UAAU,CAACY,IAAX,CAAgB,CACnBV,OAAO,CAAC,CAAC;AAAEW,MAAAA,aAAF;AAAiBC,MAAAA;AAAjB,KAAD,KAAqC;AAC1C,UAAID,aAAJ,EACGA,aAAa,CAACE,OAAd,CAAsB,CAAC;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,SAAX;AAAsBC,QAAAA;AAAtB,OAAD,KACnBC,OAAO,CAACC,GAAR,CACI,6BAA4BJ,OAAQ,eAAcC,SAAU,WAAUC,IAAK,EAD/E,CADH;AAKH,UAAIJ,YAAJ,EACGK,OAAO,CAACC,GAAR,CACI,oBAAmBN,YAAa,0CADpC;AAGL,KAXM,CADY,EAanB;AACAV,IAAAA,gBAAgB,CAAC;AACdiB,MAAAA,GAAG,EACA,OAAyCf,QAAzC,GAAoDC,YAFzC;AAGde,MAAAA,YAAY,EAAE;AACXC,QAAAA,WAAW,EAAE;AADF,OAHA;AAMd;AACAd,MAAAA;AAPc,KAAD,CAdG,CAAhB,CADe;AAyBrBe,IAAAA,KAAK,EAAE,IAAIvB,aAAJ,CAAkB;AACtBwB,MAAAA,YAAY,EAAE;AACXC,QAAAA,KAAK,EAAE;AACJC,UAAAA,MAAM,EAAE,CACL;AACA;AAFK;AADJ;AADI;AADQ,KAAlB,EASJC,OATI,CASIlB,YAAY,IAAI,EATpB;AAzBc,GAAjB,CAAP;AAoCF;;AAED,eAAeL,UAAU,CAACG,YAAD,EAAe;AAAEL,EAAAA;AAAF,CAAf,CAAzB","sourcesContent":["import { ApolloClient, ApolloLink, InMemoryCache } from '@apollo/client';\r\nimport { onError } from '@apollo/link-error';\r\nimport { getDataFromTree } from '@apollo/client/react/ssr';\r\nimport { createUploadLink } from 'apollo-upload-client';\r\nimport withApollo from 'next-with-apollo';\r\nimport { endpoint, prodEndpoint } from '../config';\r\n\r\nfunction createClient({ headers, initialState }) {\r\n   return new ApolloClient({\r\n      link: ApolloLink.from([\r\n         onError(({ graphQLErrors, networkError }) => {\r\n            if (graphQLErrors)\r\n               graphQLErrors.forEach(({ message, locations, path }) =>\r\n                  console.log(\r\n                     `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\r\n                  )\r\n               );\r\n            if (networkError)\r\n               console.log(\r\n                  `[Network error]: ${networkError}. Backend is unreachable. Is it running?`\r\n               );\r\n         }),\r\n         // this uses apollo-link-http under the hood, so all the options here come from that package\r\n         createUploadLink({\r\n            uri:\r\n               process.env.NODE_ENV === 'development' ? endpoint : prodEndpoint,\r\n            fetchOptions: {\r\n               credentials: 'include',\r\n            },\r\n            // pass the headers along from this request. This enables SSR with logged in state\r\n            headers,\r\n         }),\r\n      ]),\r\n      cache: new InMemoryCache({\r\n         typePolicies: {\r\n            Query: {\r\n               fields: {\r\n                  // TODO: We will add this together!\r\n                  // allProducts: paginationField(),\r\n               },\r\n            },\r\n         },\r\n      }).restore(initialState || {}),\r\n   });\r\n}\r\n\r\nexport default withApollo(createClient, { getDataFromTree });\r\n"]},"metadata":{},"sourceType":"module"}