{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\WebDEV\\\\C O U R S E S\\\\ecommerce-wesbos\\\\frontend\\\\components\\\\Checkout.js\";\nimport { gql, useMutation } from '@apollo/client';\nimport { CardElement, Elements, useElements, useStripe } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useRouter } from 'next/dist/client/router';\nimport nProgress from 'nprogress';\nimport { useState } from 'react';\nimport styled from 'styled-components';\nimport { useCart } from '../lib/cartState';\nimport SickButton from './styles/SickButton';\nconst CheckoutFormStyles = styled.form.withConfig({\n  displayName: \"Checkout__CheckoutFormStyles\",\n  componentId: \"sc-10mtoy5-0\"\n})([\"box-shadow:0 1px 2px 2px rgba(0,0,0,0.04);border:1px solid rgba(0,0,0,0.06);border-radius:5px;padding:1rem;display:grid;grid-gap:1rem;\"]);\nconst CREATE_ORDER_MUTATION = gql`\n   mutation CREATE_ORDER_MUTATION($token: String!) {\n      checkout(token: $token) {\n         id\n         charge\n         total\n         items {\n            id\n            name\n         }\n      }\n   }\n`;\nconst stripeLib = loadStripe(process.env.NEXT_PUBLIC_STRIPE_KEY);\n\nfunction CheckoutForm() {\n  const {\n    0: error,\n    1: setError\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const stripe = useStripe();\n  const elements = useElements();\n  const [checkout, {\n    error: graphQLError\n  }] = useMutation(CREATE_ORDER_MUTATION);\n  const router = useRouter();\n  const {\n    closeCart\n  } = useCart();\n\n  async function handleSubmit(e) {\n    // 1. Stop the form from submitting and turn the loader on\n    e.preventDefault();\n    setLoading(true); // 2.Start the page transition\n\n    nProgress.start(); // 3.Create the payment method via stripe (token comes back if sucessful)\n\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: elements.getElement(CardElement)\n    });\n    console.log(paymentMethod); // 4. Handle any errors from stripe\n\n    if (error) {\n      setError(error);\n      nProgress.done();\n      return; // stops the checkout from happening\n    } // 5. Send the token from tep 3 to our keystone server via custom mutation\n\n\n    const order = await checkout({\n      variables: {\n        token: paymentMethod.id\n      }\n    });\n    console.log('Finish with the order!!', order); // 6. Change the page to view the order\n\n    router.push({\n      pathname: '/order',\n      query: {\n        id: order.data.checkout.id\n      }\n    }); // 7. Close the cart\n\n    closeCart(); // 8. Turn the loader off\n\n    setLoading(false);\n    nProgress.done();\n  }\n\n  return /*#__PURE__*/_jsxDEV(CheckoutFormStyles, {\n    onSubmit: handleSubmit,\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontSize: 12\n      },\n      children: error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 20\n    }, this), graphQLError && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontSize: 12\n      },\n      children: graphQLError.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(SickButton, {\n      children: \"Check out now\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 7\n  }, this);\n}\n\nfunction Checkout() {\n  return /*#__PURE__*/_jsxDEV(Elements, {\n    stripe: stripeLib,\n    children: /*#__PURE__*/_jsxDEV(CheckoutForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 7\n  }, this);\n}\n\nexport default Checkout;","map":{"version":3,"sources":["C:/WebDEV/C O U R S E S/ecommerce-wesbos/frontend/components/Checkout.js"],"names":["gql","useMutation","CardElement","Elements","useElements","useStripe","loadStripe","useRouter","nProgress","useState","styled","useCart","SickButton","CheckoutFormStyles","form","CREATE_ORDER_MUTATION","stripeLib","process","env","NEXT_PUBLIC_STRIPE_KEY","CheckoutForm","error","setError","loading","setLoading","stripe","elements","checkout","graphQLError","router","closeCart","handleSubmit","e","preventDefault","start","paymentMethod","createPaymentMethod","type","card","getElement","console","log","done","order","variables","token","id","push","pathname","query","data","fontSize","message","Checkout"],"mappings":"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","sourcesContent":["import { gql, useMutation } from '@apollo/client';\r\nimport {\r\n   CardElement,\r\n   Elements,\r\n   useElements,\r\n   useStripe,\r\n} from '@stripe/react-stripe-js';\r\nimport { loadStripe } from '@stripe/stripe-js';\r\nimport { useRouter } from 'next/dist/client/router';\r\nimport nProgress from 'nprogress';\r\nimport { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useCart } from '../lib/cartState';\r\nimport SickButton from './styles/SickButton';\r\n\r\nconst CheckoutFormStyles = styled.form`\r\n   box-shadow: 0 1px 2px 2px rgba(0, 0, 0, 0.04);\r\n   border: 1px solid rgba(0, 0, 0, 0.06);\r\n   border-radius: 5px;\r\n   padding: 1rem;\r\n   display: grid;\r\n   grid-gap: 1rem;\r\n`;\r\n\r\nconst CREATE_ORDER_MUTATION = gql`\r\n   mutation CREATE_ORDER_MUTATION($token: String!) {\r\n      checkout(token: $token) {\r\n         id\r\n         charge\r\n         total\r\n         items {\r\n            id\r\n            name\r\n         }\r\n      }\r\n   }\r\n`;\r\n\r\nconst stripeLib = loadStripe(process.env.NEXT_PUBLIC_STRIPE_KEY);\r\n\r\nfunction CheckoutForm() {\r\n   const [error, setError] = useState();\r\n   const [loading, setLoading] = useState(false);\r\n   const stripe = useStripe();\r\n   const elements = useElements();\r\n   const [checkout, { error: graphQLError }] = useMutation(\r\n      CREATE_ORDER_MUTATION\r\n   );\r\n   const router = useRouter();\r\n   const { closeCart } = useCart();\r\n\r\n   async function handleSubmit(e) {\r\n      // 1. Stop the form from submitting and turn the loader on\r\n      e.preventDefault();\r\n      setLoading(true);\r\n      // 2.Start the page transition\r\n      nProgress.start();\r\n      // 3.Create the payment method via stripe (token comes back if sucessful)\r\n      const { error, paymentMethod } = await stripe.createPaymentMethod({\r\n         type: 'card',\r\n         card: elements.getElement(CardElement),\r\n      });\r\n      console.log(paymentMethod);\r\n      // 4. Handle any errors from stripe\r\n      if (error) {\r\n         setError(error);\r\n         nProgress.done();\r\n         return; // stops the checkout from happening\r\n      }\r\n      // 5. Send the token from tep 3 to our keystone server via custom mutation\r\n      const order = await checkout({ variables: { token: paymentMethod.id } });\r\n      console.log('Finish with the order!!', order);\r\n      // 6. Change the page to view the order\r\n      router.push({\r\n         pathname: '/order',\r\n         query: { id: order.data.checkout.id },\r\n      });\r\n      // 7. Close the cart\r\n      closeCart();\r\n      // 8. Turn the loader off\r\n      setLoading(false);\r\n      nProgress.done();\r\n   }\r\n\r\n   return (\r\n      <CheckoutFormStyles onSubmit={handleSubmit}>\r\n         {error && <p style={{ fontSize: 12 }}>{error.message}</p>}\r\n         {graphQLError && (\r\n            <p style={{ fontSize: 12 }}>{graphQLError.message}</p>\r\n         )}\r\n         <CardElement />\r\n         <SickButton>Check out now</SickButton>\r\n      </CheckoutFormStyles>\r\n   );\r\n}\r\n\r\nfunction Checkout() {\r\n   return (\r\n      <Elements stripe={stripeLib}>\r\n         <CheckoutForm />\r\n      </Elements>\r\n   );\r\n}\r\n\r\nexport default Checkout;\r\n"]},"metadata":{},"sourceType":"module"}