{"ast":null,"code":"import { PAGINATION_QUERY } from '../components/Pagination';\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n\n    // Tells apollo we will take care of everything\n    read(existing = [], {\n      args,\n      cache\n    }) {\n      var _data$_allProductsMet;\n\n      // First thing it does is ask the read fn for those items\n      const {\n        skip,\n        first\n      } = args; // Read the number of items on the page from the cache\n\n      const data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      const count = data === null || data === void 0 ? void 0 : (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count;\n      const page = skip / first + 1;\n      const pages = Math.ceil(count / first); // Check if we have existing items\n\n      const items = existing.slice(skip, skip + first).filter(x => x);\n\n      if (items.length !== first) {\n        // We dont have any items, we must fetch them\n        return false;\n      } // If there are items, just return them from the cache\n\n\n      if (items.length) {\n        return items;\n      }\n\n      return false; // fallback to network\n    },\n\n    merge(existing, incoming, {\n      args\n    }) {\n      const {\n        skip,\n        first\n      } = args; // This runs when apollo client comes back from the network with our products\n\n      const merged = existing ? existing.slice(0) : [];\n\n      for (let i = skip; i < skip + incoming.length; ++i) {\n        merged[i] = incoming[i - skip];\n      } // Finally we return items the merged items from the cache\n\n\n      return merged;\n    }\n\n  };\n}","map":{"version":3,"sources":["C:/WebDEV/C O U R S E S/ecommerce-wesbos/frontend/lib/paginationField.js"],"names":["PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","skip","first","data","readQuery","query","count","_allProductsMeta","page","pages","Math","ceil","items","slice","filter","x","length","merge","incoming","merged","i"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,0BAAjC;AAEA,eAAe,SAASC,eAAT,GAA2B;AACvC,SAAO;AACJC,IAAAA,OAAO,EAAE,KADL;;AACY;AAChBC,IAAAA,IAAI,CAACC,QAAQ,GAAG,EAAZ,EAAgB;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAhB,EAAiC;AAAA;;AAClC;AAEA,YAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBH,IAAxB,CAHkC,CAIlC;;AACA,YAAMI,IAAI,GAAGH,KAAK,CAACI,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEX;AAAT,OAAhB,CAAb;AACA,YAAMY,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,gBAAT,0DAAG,sBAAwBD,KAAtC;AACA,YAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAe,CAA5B;AACA,YAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd,CARkC,CASlC;;AACA,YAAMU,KAAK,GAAGd,QAAQ,CAACe,KAAT,CAAeZ,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCY,MAAnC,CAA2CC,CAAD,IAAOA,CAAjD,CAAd;;AACA,UAAIH,KAAK,CAACI,MAAN,KAAiBd,KAArB,EAA4B;AACzB;AACA,eAAO,KAAP;AACF,OAdiC,CAelC;;;AACA,UAAIU,KAAK,CAACI,MAAV,EAAkB;AACf,eAAOJ,KAAP;AACF;;AACD,aAAO,KAAP,CAnBkC,CAmBpB;AAChB,KAtBG;;AAuBJK,IAAAA,KAAK,CAACnB,QAAD,EAAWoB,QAAX,EAAqB;AAAEnB,MAAAA;AAAF,KAArB,EAA+B;AACjC,YAAM;AAAEE,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBH,IAAxB,CADiC,CAEjC;;AAEA,YAAMoB,MAAM,GAAGrB,QAAQ,GAAGA,QAAQ,CAACe,KAAT,CAAe,CAAf,CAAH,GAAuB,EAA9C;;AACA,WAAK,IAAIO,CAAC,GAAGnB,IAAb,EAAmBmB,CAAC,GAAGnB,IAAI,GAAGiB,QAAQ,CAACF,MAAvC,EAA+C,EAAEI,CAAjD,EAAoD;AACjDD,QAAAA,MAAM,CAACC,CAAD,CAAN,GAAYF,QAAQ,CAACE,CAAC,GAAGnB,IAAL,CAApB;AACF,OAPgC,CAQjC;;;AACA,aAAOkB,MAAP;AACF;;AAjCG,GAAP;AAmCF","sourcesContent":["import { PAGINATION_QUERY } from '../components/Pagination';\r\n\r\nexport default function paginationField() {\r\n   return {\r\n      keyArgs: false, // Tells apollo we will take care of everything\r\n      read(existing = [], { args, cache }) {\r\n         // First thing it does is ask the read fn for those items\r\n\r\n         const { skip, first } = args;\r\n         // Read the number of items on the page from the cache\r\n         const data = cache.readQuery({ query: PAGINATION_QUERY });\r\n         const count = data?._allProductsMeta?.count;\r\n         const page = skip / first + 1;\r\n         const pages = Math.ceil(count / first);\r\n         // Check if we have existing items\r\n         const items = existing.slice(skip, skip + first).filter((x) => x);\r\n         if (items.length !== first) {\r\n            // We dont have any items, we must fetch them\r\n            return false;\r\n         }\r\n         // If there are items, just return them from the cache\r\n         if (items.length) {\r\n            return items;\r\n         }\r\n         return false; // fallback to network\r\n      },\r\n      merge(existing, incoming, { args }) {\r\n         const { skip, first } = args;\r\n         // This runs when apollo client comes back from the network with our products\r\n\r\n         const merged = existing ? existing.slice(0) : [];\r\n         for (let i = skip; i < skip + incoming.length; ++i) {\r\n            merged[i] = incoming[i - skip];\r\n         }\r\n         // Finally we return items the merged items from the cache\r\n         return merged;\r\n      },\r\n   };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}